---
description: 
globs: 
alwaysApply: true
---
\
```
---
description: "Vortex IDE Rules - Django + HTMX/Alpine/Plotly/Tailwind (Phase 1 - Local Dev)"
globs: ["*.py", "*.html", "*.js", "*.css", "*.ini", "*.yaml"] # Added .css for Tailwind
rules: 
  - dev machine is on windows, so all commands should possible to execute in windows 11 powershell
  - all code should be thought, analyzed and written with the mindset of great developers focused on simplicity, maintainability, and hypermedia systems (e.g., leveraging HTMX effectively), drawing inspiration from figures like Armin Ronacher, Kenneth Reitz, Dan Abramov, Ryan Dahl. # Adjusted emphasis
  - read memory.md in the root directory with the errors that occured before and ensure it does not happen again
  - update memory.md with the errors you encountered, the root cause and the fix, so that it does not occur again. If file does not exist in root, create a new file. Ensure that these errors don't occur again
alwaysApply: true
// ... existing code ...
## üêõ Debugging & Troubleshooting
 // ... existing code ...
### Phase 1: Directory Structure
# Based on phased_pdd.yaml Phase 1 and common Django practice
directory_structure:
  structure:
    root:
      - "manage.py"
      - "requirements.txt"
      - "README.md"
      - ".env.example"
      - ".env" # Should be gitignored
      - ".gitignore"
      # - "Procfile" # Removed for Phase 1 (Local Dev)
      - "pytest.ini" # Added for testing
      - ".pre-commit-config.yaml" # Added for tooling
      - "tailwind.config.js" # Added for Tailwind
      - "package.json" # Added for Tailwind/frontend deps
      - "heatmaps/": # Django project directory
          - "__init__.py"
          - "settings/": ["__init__.py", "base.py", "dev.py", "prod.py"] # Keep prod.py structure
          - "urls.py"
          - "wsgi.py"
          - "asgi.py"
      - "apps/":
          - "core/": # Main application
              - "__init__.py"
              - "admin.py"
              - "apps.py"
              - "models.py"
              - "views.py" # Standard Django views rendering HTML (including partials)
              - "urls.py"
              # - "serializers.py" # Optional if using DRF for specific data endpoints
              - "services.py" # For business logic like YFinance fetcher
              - "tests.py"
              - "management/":
                  - "__init__.py"
                  - "commands/":
                      - "__init__.py"
                      # - "fetch_stock_data.py" # Example command
      - "templates/":
          - "base.html" # Should include HTMX, AlpineJS
          - "core/": # App-specific templates
              - "heatmap_page.html"
          - "partials/" # Directory for HTMX partial templates
              - "_filters.html" # Example partial
      - "static/":
          - "css/": ["styles.css"] # Compiled Tailwind CSS
          - "js/":
              - "main.js" # Minimal JS, potentially for Plotly/Alpine init
              - "vendor/":
                - "plotly-basic.min.js" # Example vendor JS
                - "htmx.min.js"
                - "alpine.min.js" # If using Alpine.js
      # Removed media/ for Phase 1 (unless needed)

### Phase 1: Backend Architecture (Django Core)
component_architecture:
  rules:
    - "Use Django settings split (base.py, dev.py, prod.py)."
    - "Store secrets and environment-specific configs in .env files (using python-dotenv)."
    - "Use dj-database-url for database configuration (supporting local PostgreSQL/SQLite)."
    - "Separate business logic from views into service layers (e.g., `apps/core/services.py`)."
    - "Implement API endpoints using standard Django JsonResponse or DRF only if necessary for specific data needs not suited for HTMX partials."
    - "Prioritize Django views rendering HTML partials for HTMX interactions."
    - "Use management commands for data fetching/processing tasks (manual trigger initially)."

### Phase 1: Frontend Architecture (HTMX + Alpine.js + Plotly + Tailwind)
frontend_architecture:
  rules:
    - "Leverage HTMX for server-rendered HTML partials to handle dynamic updates and interactivity (use `hx-get`, `hx-post`, `hx-target`, `hx-swap`, etc.)."
    - "Use Alpine.js minimally for client-side enhancements or interactions that don't warrant a server round-trip."
    - "Use Tailwind CSS for styling, configured via `tailwind.config.js` and compiled into `static/css/styles.css`."
    - "Initialize Plotly.js charts using minimal JavaScript (`static/js/main.js` or inline script), passing configuration data from the Django view/template context."
    - "Structure templates logically, separating base layouts, full pages, and reusable partials (`templates/partials/`)."
    - "Fetch data implicitly via HTMX requests that return HTML partials from Django views."
    - "Handle loading states using HTMX indicators or Alpine.js where appropriate."
    - "Ensure responsiveness using Tailwind CSS utility classes."

### Phase 1: Database (Local PostgreSQL / SQLite)
database_rules:
  rules:
    - "Define clear Django models in `apps/core/models.py`."
    - "Use appropriate field types (e.g., `DecimalField` for currency/prices)."
    - "Generate migrations using `makemigrations` and apply using `migrate`."
    - "Optimize database queries using `select_related` and `prefetch_related` where necessary."
    - "Configure connection via `DATABASE_URL` environment variable (handled by dj-database-url), defaulting to local PostgreSQL or SQLite for development."

### Phase 1: Caching (Local Memory)
caching_rules:
  rules:
    - "Use Django's `LocMemCache` for local development caching if needed."
    - "Plan for a proper cache backend (like Redis) for later deployment phases."

### Phase 1: Testing (Pytest)
test_organization:
  structure:
    - "apps/core/tests.py" # Initial tests co-located with app
  rules:
    - "Use `pytest` and `pytest-django` for running tests locally."
    - "Write unit tests for models and services."
    - "Write integration tests for Django views, checking HTML structure/content relevant to HTMX partials and context data."
    - "Aim for reasonable test coverage of core logic."
    - "Mock external services like YFinance during tests."

### Phase 1: CI/CD (Local Focus + Basic CI)
cicd:
  rules:
    - "Focus on a robust local development setup."
    # - "Optionally, configure GitHub Actions for CI to run tests (pytest) on push/pull_request."
    # - "Deployment rules deferred to later phases."

### Phase 1: Monitoring & Logging (Local Console)
monitoring:
  rules:
    - "Implement standard Python/Django logging, outputting to console for local development."
    - "Configure log levels appropriately in `settings/dev.py`."
    # - "Health checks and external monitoring deferred to deployment phases."

### Phase 1: Security (Local Development)
security_evolution:
  - "Keep `SECRET_KEY` secure using environment variables (`python-dotenv`)."
  - "Use `DEBUG=True` only in `settings/dev.py`."
  - "Standard Django CSRF protection should be active."
  # - "Production security measures (HTTPS, middleware hardening) deferred to deployment phases."

### Phase 1: Documentation Links
references:
  - "Django Documentation (4.2)"
  - "HTMX Documentation"
  - "Alpine.js Documentation"
  - "Plotly.js Documentation"
  - "Tailwind CSS Documentation"
  - "Python `dotenv` Documentation"
  - "dj-database-url Documentation"
  - "Pytest Documentation"
  - "Pytest-Django Documentation"

# --- HTMX Sections Removed ---
# (Incorporated into Phase 1 Frontend Architecture)
```