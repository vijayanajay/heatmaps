# vortex_simplified_architecture.yaml
# Aligned with product_description.yaml, prioritizing local dev first

phased_development:
  phase_1:
    name: "Local Core Setup & Basic Heatmap"
    duration: "Month 1"
    tech_stack:
      backend: "Django 4.2 + PostgreSQL (Local)"
      frontend: "HTMX + Alpine.js (minimal) + Tailwind CSS + Plotly.js (init via JS)"
      hosting: "Local Development Environment"
      api_framework: "Django (views render HTML partials), DRF (optional, for specific data endpoints)"
    features:
      - "Project structure setup (Django, Apps, Templates, Static)"
      - "Local development environment setup (Python venv, local PostgreSQL/SQLite)"
      - "Basic Django models for stock/index data (Migrations)"
      - "Initial YFinance data fetching script (manual trigger, local storage/DB)"
      - "Basic heatmap template structure (Tailwind CSS setup)"
      - "Django view renders template with embedded Plotly chart JSON configuration"
      - "Alpine.js/minimal JS initializes Plotly chart using server-provided config"
      - "Basic Django views render initial heatmap page and necessary HTML partials"
      - "Local static file serving setup"
      - "HTMX attributes added to templates for core structure and loading"
    architecture:
      design_principles:
        - "Build core functionality locally first"
        - "Leverage HTMX for server-rendered partials"
        - "Use Alpine.js for minimal client-side enhancements"
      implementation:
        backend: "Django settings (base/dev), Core app, Local DB config (dj-database-url), Views render HTML partials"
        frontend: "Base template with HTMX/AlpineJS includes, Tailwind config, Plotly initialized via JS from server config"
        data_flow: "Manual YFinance script -> ORM (Local DB) -> Django View (renders partial w/ Plotly JSON) -> HTMX Response -> Alpine/JS initializes Plotly"
      hosting_cost: "$0 (Local)"
    testing_strategy: "Pytest for backend models, services, views (check context/HTML structure)"
    security: "Standard Django development security (SECRET_KEY management)"

  phase_2:
    name: "Local Data Pipeline, Interactivity & DO Deployment Prep"
    duration: "Month 2"
    tech_stack_additions:
      - "Celery + Redis (Local instances)"
      - "Pandas"
      - "DigitalOcean App Platform + Managed PostgreSQL + Spaces (Setup towards end of phase)"
    features:
      - "Local Celery setup for scheduled daily YFinance data updates"
      - "Calculation & storage of essential metrics (e.g., volatility, momentum) using Pandas (local DB)"
      - "HTMX-powered filters triggering server requests that return updated HTML partials (local testing)"
      - "HTMX updates for displaying selected stock details via server-rendered partials (local testing)"
      - "Basic error handling and logging for local data pipeline"
      - "Prepare production settings (prod.py)"
      - "**End of Phase:** Setup DigitalOcean resources (App Platform, Managed DB, Spaces)"
      - "**End of Phase:** Configure application for DO deployment (settings, requirements, Procfile/Dockerfile if needed)"
      - "**End of Phase:** Initial deployment to DO App Platform"
      - "**End of Phase:** Configure static file serving via DO Spaces for deployed app"
    architecture:
      design_principles:
        - "Complete core features locally before deploying"
        - "Ensure smooth transition from local to cloud hosting"
      implementation:
        backend: "Local Celery tasks, Pandas integration, Django views for partials. Add prod settings. DO deployment config."
        frontend: "Refine HTMX triggers/targets/swaps locally. Ensure static files are ready for CDN."
        caching: "Django DB Cache (local testing)"
      hosting_cost: "Starts at ~$32/mo towards end of phase (DO App Platform Basic + Managed PG + Spaces)"
    testing_strategy: "Pytest for Celery tasks, services, views (local). Add basic deployment verification checks."
    security: "Prepare production secrets management. HTTPS handled by DO App Platform post-deployment."

  phase_3:
    name: "Deployed Enhancements & PWA Basics"
    duration: "Month 3"
    tech_stack_additions:
      - "Workbox (for PWA)"
    features:
      - "Timeframe flexibility implementation (testing against deployed DO app)"
      - "Interactive tooltips on heatmap elements (testing against deployed DO app)"
      - "Basic PWA setup (manifest.json, service worker via Workbox for caching core assets - deployed app)"
      - "Improved UI/UX based on feedback from deployed version"
      - "Configure Celery worker on DO App Platform (if not using managed Redis with separate worker)"
    architecture:
      design_principles:
        - "Iterate on the deployed application"
        - "Progressive enhancement for PWA"
      implementation:
        backend: "Database optimizations (e.g., materialized views if needed, on DO DB)"
        frontend: "Workbox integration, HTMX history support (`hx-push-url`), Refined Plotly charts via server config"
        caching: "Configure Django DB Cache or Managed Redis on DO"
      hosting_cost: "~$32-$47/mo (depending on Redis usage)"
    testing_strategy: "Add Cypress component tests for HTMX/Alpine interactions on deployed staging/dev environment"
    security: "Review PWA security considerations (cache management)"

  phase_4:
    name: "Deployed Optimization & Monetization Prep"
    duration: "Month 4"
    tech_stack_additions: [] # Focus on refinement
    features:
      - "Performance tuning (DO database query optimization, template rendering)"
      - "Asset optimization (CSS/JS minification - build process refinement)"
      - "Basic AdSense integration setup (testing on deployed app)"
      - "Refined error handling and monitoring for deployed app (e.g., Sentry setup)"
    architecture:
      design_principles:
        - "Optimize the live application"
        - "Non-intrusive monetization"
      implementation:
        backend: "Gzip compression middleware, Refine Cache-Control headers (DO level or Django)"
        frontend: "Ad placeholder loading strategy tested on deployed app"
        monitoring: "Implement health checks on DO, integrate Sentry/logging service"
      hosting_cost: "~$32-$47/mo"
    testing_strategy: "E2E tests for critical user flows on deployed staging/dev environment"
    security: "Implement Content Security Policy (CSP) headers on deployed app"

# Phases 5+ represent post-MVP enhancements (e.g., advanced features, scalability)
# Future phases could include: Advanced metrics, user accounts, alerts, mobile app integration, etc.

cross_phase_architecture:
  design_rules:
    - "Prioritize simplicity and maintainability"
    - "Adhere to technology stack defined in product_description.yaml"
    - "Introduce new dependencies cautiously"
    - "Maximize local development before cloud deployment"

  error_handling:
    - "Phase 1-2 (Local): Fail fast with detailed logging"
    - "Phase 2 (Deployed)+: Consider Sentry or similar for structured error reporting"

  testing_strategy:
    - "Phase 1-2 (Local): Pytest (backend focus)"
    - "Phase 2 (Deployed)+: Add deployment verification"
    - "Phase 3: Add Cypress component tests (frontend interaction - deployed)"
    - "Phase 4: Add E2E tests (key user flows - deployed)"

  security_evolution:
    - "Phase 1 (Local): Standard Django dev security"
    - "Phase 2 (Deployed)+: HTTPS (DO) + Django secure middleware"
    - "Phase 4: CSP headers, review AdSense security implications (deployed)"

  scaling_plan:
    - "Phases 1-4: Focus on optimization first. Vertical scaling via DO App Platform tiers post-deployment."
    - "Post-MVP: Consider read replicas, advanced caching (Redis), horizontal scaling if necessary (on DO)"